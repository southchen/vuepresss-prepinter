(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{480:function(a,t,s){"use strict";s.r(t);var n=s(3),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul")]),s("p"),a._v(" "),s("h1",{attrs:{id:"backtracking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#backtracking"}},[a._v("#")]),a._v(" Backtracking")]),a._v(" "),s("p",[a._v("1、路径：也就是已经做出的选择。\n2、选择列表：也就是你当前可以做的选择。\n3、结束条件：也就是到达决策树底层，⽆法再做选择的条件。")]),a._v(" "),s("p",[a._v("前序遍历的代码在进⼊某⼀个节点之前的那个时间点执⾏，后序遍历代码在\n离开某个节点之后的那个时间点执⾏。")]),a._v(" "),s("p",[a._v("回溯：")]),a._v(" "),s("p",[a._v("我们只要在递归之前做出选择，在递归之后撤销刚才的选择")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" 选择 in 选择列表"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n    # 做选择\n    将该选择从选择列表移除\n    路径"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("选择"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("backtrack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("路径"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" 选择列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    # 撤销选择\n    路径"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("选择"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    将该选择再加入选择列表\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("回溯算法就是纯暴⼒穷举，复杂度⼀般都很⾼，不像动态规划存在重叠⼦问题可以优化")]),a._v(" "),s("p",[a._v("46")]),a._v(" "),s("p",[a._v("回溯的意义在于穷举整个树，找出所有的组合")]),a._v(" "),s("p",[a._v("1 种排列 看作 1 条路径")]),a._v(" "),s("ul",[s("li",[a._v("递归的入口：path 空数组，代表还没选择，它有 3 个选择，对应 3 个分支")]),a._v(" "),s("li",[a._v("每个子节点又有 3 个选择，选择不同的数字就像走不同的路径")]),a._v(" "),s("li",[a._v("递归的出口：path 长度等于 nums 长度，代表选满了，生成了一个排列，可以推入结果数组")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"_113-path-sum-ii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_113-path-sum-ii"}},[a._v("#")]),a._v(" "),s("a",{attrs:{href:"https://leetcode-cn.com/problems/path-sum-ii/",target:"_blank",rel:"noopener noreferrer"}},[a._v("113. Path Sum II"),s("OutboundLink")],1)]),a._v(" "),s("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://pic.leetcode-cn.com/6a464ba95a7ad1c247aa39610535984c241e6b95148f8bc36b02908a190b1d54-image.png"}})])}),[],!1,null,null,null);t.default=e.exports}}]);